import random
import unittest
import numpy as np
import pandas as pd
from pandas import Series, DataFrame
import cx_Oracle
import sqlalchemy as sa
from sqlalchemy import create_engine
conn = cx_Oracle.connect('ifrm_uds/SquareOne123@10.0.0.180:1521/ORCL.ap-south-1.compute.internal')
cursor = conn.cursor()
Select_Query1 = "select score_value,entity_id from entity_score"
cursor.execute(Select_Query1)
ret = pd.DataFrame(cursor.fetchall())
ret.columns=['SCORE_VALUE','ENTITY_ID']
index1=ret.index
no_of_entity_id = len(index1)
score_value= ret.loc[:,'SCORE_VALUE']
print("no_of_rows_in_entity_id = ", no_of_entity_id)
Select_Querry2 ="select CUST_CIF from Customer_Master"
cursor.execute(Select_Querry2)
rat = pd.DataFrame(cursor.fetchall())
rat.columns=['CUST_CIF']
index2=rat.index
no_of_CUST_CIF = len(index2)
print("no_of_rows_in_CUST_CIF = ", no_of_CUST_CIF)
class TestMethod(unittest.TestCase):
    def test_method1(self):
        self.assertEqual(score_value,-1)
    def test_method2(self):
        self.assertEqual(score_value,99)
    def test_method3(self):
        self.assertEqual(score_value,100)
    def test_method4(self):
        self.assertEqual(score_value,90)
    def test_method5(self):
        self.assertEqual(score_value,80)
    def test_method6(self):
        self.assertEqual(score_value,70)
    def test_method7(self):
        self.assertEqual(score_value,60)
    def test_method8(self):
        self.assertEqual(score_value,40)
if __name__=='__main__':
     unittest.main()            