import unittest 
import random
import numpy as np
import pandas as pd
from pandas import Series, DataFrame
import cx_Oracle
import sqlalchemy as sa
from sqlalchemy import create_engine

def get_data(entity_id,score_id):
    conn = cx_Oracle.connect('ifrm_uds/SquareOne123@10.0.0.180:1521/ORCL.ap-south-1.compute.internal')
    cursor = conn.cursor()
    Select_Query1 = "select SCORE_VALUE from entity_score where ENTITY_ID = '{0}' and SCORE_ID={1}".format(entity_id,score_id) 
    print(Select_Query1)
    cursor.execute(Select_Query1)
    ret = pd.DataFrame(cursor.fetchall())
    score_value = ret.iloc[0,0]
   # print("score_value:", score_value)
    return(score_value)

class TestMethod(unittest.TestCase):
    def test_TS_CDS013(self):
        score_value = get_data('8025973073',102)
        self.assertEquals(score_value,0.862)
    def test_TS_CDS014(self):
        score_value = get_data('8025973074',102)
        self.assertEquals(score_value,0.72)
    def test_TS_CDS015(self):
        score_value = get_data('8025973075',102)
        self.assertEquals(score_value,0.426)
    def test_TS_CDS016(self):
        score_value = get_data('8025973076',102)
        self.assertEquals(score_value,0.262)
    def test_TS_CDS017(self):
        score_value = get_data('8025973077',102)
        self.assertEquals(score_value,0.942)
    def test_TS_CDS018(self):
        score_value = get_data('8025973078',102)
        self.assertEquals(score_value,0.63)
    def test_TS_CDS019(self):
        score_value = get_data('8025973079',102)
        self.assertEquals(score_value,0.192)
    def test_TS_CDS020(self):
        score_value = get_data('8025973081',102)
        self.assertEquals(score_value,0.352)
    def test_TS_CDS021(self):
        score_value = get_data('8025973080',102)
        self.assertEquals(score_value,0)
if __name__=='__main__':
     unittest.main()
